EV.Widgets.asyncMode = true;
var evo_client = "mmr";
var evo_env = document.location.hostname === "www.manoramaonline.com" ? "" : ".uat";
var profileLoadCounter = 0;
const PROFILE_LOAD_MAX_RETRY = 10;



EV.Em.init({
    url: "https://mmr.uat.evolok.net/acd/api/3.0",
	sidCookieDomain: document.location.hostname ,
    brand: "Manorama"
});
var params = JSON.stringify({ articleId: 'myaccount' });
EV.Em.authorize(params, handleMeteringSuccess, handleMeteringError)

function handleMeteringSuccess(response) {
    console.log(response);
    if (response.result == "ALLOW_ACCESS") {
        console.log("ALLOW_ACCESS");
    } else if (response.requireEntitlement) {
        console.log("REQUIRE_LOGIN_WITH_ENTITLEMENT");
    } else {
        if (response.result == "REQUIRE_LOGIN") {
            console.log("REQUIRE_LOGIN");
        } else {
            console.log("REQUIRE_ENTITLEMENT");
        }
    }
}

function handleMeteringError(error) {}

//ENVIRONMENT VARIABLES
//CORE INITIALISATION
EV.Core.init({
    serviceName: 'registration',
    realmName: 'default_realm',
    icDomain: 'https://mmr.uat.evolok.net/ic/api',
    secureMode: true,
    ssoCookieDomain: evo_env === '.uat' ? document.location.hostname : document.location.hostname.replace('www.', ''),
    brand: 'Manorama'
});
//PRODUCT MANAGEMENT INITIALISATION
EV.PM.init({
    pmDomain: "https://mmr.uat.evolok.net/pm/api/v2",
    brand: "Manorama",
    razorpayKey: 'rzp_test_pMfgoAshqA22hz',
    razorpayMerchantDisplayName: 'The Malayala Manorama Company Limited'
});
EV.WM.init({
    wmDomain: "https://mmr.uat.evolok.net/wm/api/v1/ev-widgets",
    brand: "Manorama",
    language: "en",
    useWmTranslations: true,
	useWmReferenceData: true
});
EV.Translate.setActiveLanguage("en", true);
//WIDGET DISPLAY OPTIONS
EV.Widgets = EV.Widgets || {};
EV.Widgets.Display = {
    'tandc': {
        'type': 'checkbox',
        'values': [
            { 'value': 'true', 'caption': 'Accept Terms and Conditions' }
        ]
    },
    gender: {
        type: "radiobutton",
        values: [{
            caption: "Male",
            value: "male"
        }, {
            caption: "Female",
            value: "female"
        }, {
            caption: "Transgender",
            value: "transgender"
        }]
    }
}
//EVENTS
EV.Event.publish(EV.Event.PM_VALIDATE_PROFILE, {
    serviceName: "subscribe",
    successCb: function (response) {
        console.log("The Profile is Valid");
    },
    errorCb: function (error) {
        console.log("Error Validating Profile:", error);
    }
});
EV.Event.on(EV.Event.PM_ERROR, function (res) {
    console.log("EV.Event.PM_ERROR", res);
    try {
		if ((getCookieValueByName('mmu_ls')=='userLoggedIn')&&(document.cookie.match(/^(.*;)?\s*ev_ss\s*=\s*[^;]+(.*)?$/)==null)) {
            callSSOLogout();
        }
    } catch (err) {}
});
function goBack(event) {
    if ("referrer" in document) {
        window.location = document.referrer;
    } else {
        window.history.back();
    }
}
EV.Event.on(EV.Event.PM_PAYMENT_SUCCESS, function (res) {
    console.log("EV.Event.PM_PAYMENT_SUCCESS = ", res);
    setTimeout(function () {
        goBack();
    }, 500);
});
EV.Event.on(EV.Event.EDIT_PROFILE_FORM_LOADED, function (res) {
    try {
	if ((getCookieValueByName('mmu_ls')=='userLoggedIn')&&(document.cookie.match(/^(.*;)?\s*ev_ss\s*=\s*[^;]+(.*)?$/)==null)) {
		callSSOLogout();
	}	        
        profileLoadedHandler();
        initiateButtonUpdate();
        //removeStatePlaceHolder();
        // postCodeValdiationCheck();
        document.querySelector('[ng-model="dateValues.day"]').querySelector('[value=""]').label = "DD";
        document.querySelector('[ng-model="dateValues.month"]').querySelector('[value="undefined:undefined"]').label = "MM";
        document.querySelector('[ng-model="dateValues.year"]').querySelector('[value=""]').label = "YYYY";
    } catch (error) {}
});

function getCookieValueByName(cookieName) {
    const cookie = document.cookie;
    try {
            let cookieValue = cookie.split(cookieName + '=')[1].split(';')[0].replace(/\+/g, '%20');
        return decodeURIComponent(cookieValue);
    } catch (e) {
            console.log('Error reading cookie');
    }
}
function profileLoadedHandler() {
    if (profileLoadCounter < PROFILE_LOAD_MAX_RETRY) {
        if ($('#serviceAttributes').length) {
            profileLoadCounter = 0;
            customizeProfileForm();
        } else {
            profileLoadCounter++;
            setTimeout(profileLoadedHandler, 500);
        }
    } else {
        console.log('Profile widget load timed out');
    }
}

function initiateButtonUpdate() {
    $('button.ev.btn.btn-success').on('click',function(){
        setTimeout(function () {
            window.scrollTo(0, 0);
        }, 1000);
    });
}

function customizeProfileForm() {
    const widgetWrapper = $('ev-edit-profile');
    const widgetHeader = widgetWrapper.find('#widget-header');
    //const emailHint = $('<span class="email-hint field-hint">To update the email associated with your account, <a href="/contact-us.html">contact us</a></span>');
    //const phoneHint = $('<span class="phone-hint field-hint">To update the number associated with your account, <a href="/contact-us.html">contact us</a></span>');
    widgetHeader.css({ 'padding-bottom': 0 });
    if (widgetWrapper.find('.edit-profile-legend').length === 0) {
        widgetHeader.after('<span class="edit-profile-legend">indicates mandatory field</span>');
    }
    $('#email_address').attr('disabled', 'disabled');
    $('#email_address').attr('data-test', 'something');
    $('#phone_number').attr('disabled', 'disabled');

    /*if (widgetWrapper.find('.email-hint').length === 0) {
        $('#email_address').after(emailHint);
    }
    if (widgetWrapper.find('.phone-hint').length === 0) {
        $('#phone_number').after(phoneHint);
    }*/
}

function postCodeValdiationCheck() {
    $('#address1_postcode').keyup(function() {
        alert($(this).val());
        if ($(this).val()) {
        }
    });
}
function removeStatePlaceHolder() {
	if (!$('#address1_state option:eq(0)').text()){
			$('#address1_state > option:first').remove(); 
    }
	if (!$('#address1_state option:eq(0)').val()){
			$('#address1_state > option:first').remove(); 
    }
}
$(document).off().on("change",".widget-body select#address1_state", function (e) {
        removeStatePlaceHolder();
    });
EV.Event.on(EV.Event.EDIT_PROFILE_COMPLETE_SUCCESS, function () {
    window.scrollTo(0, 0);
});
EV.Event.on(EV.Event.EDIT_PROFILE_COMPLETE_SUCCESS, function () {
    window.scrollTo(0, 0);
});
EV.Event.on(EV.Event.EDIT_PROFILE_COMPLETE_FAILED, function () {
    window.scrollTo(0, 0);
});
EV.Event.on(EV.Event.CAPTURE_ATTRIBUTES_VALIDATION_FAILED, function () {
    window.scrollTo(0, 0);
});
EV.Event.on(EV.Event.PM_INVALID_PROFILE, function () {
    window.scrollTo(0, 0);
});
EV.Event.on(EV.Event.REGISTRATION_FAILED, function () {
    window.scrollTo(0, 0);
});

